
Tables
-------
 - Categories
 - Items
 - Categories *<-->* Items
   (many <--> many)
 - does this require an "association table"? I think so.

Views
------

 - In this sample project, the homepage displays all current
   categories with the latest added items.

 - Selecting a specific category shows you all the items available for
   that category.

 - Selecting a specific item shows you specific information about that
   item. 
   - what information does an item have?
   - Am I writing general code?
   - Should it work modulo any specific item schema?

 - Note that the link is
   http://localhost:8000/catalog/Snowboarding/Snowboard​.
   (I think this means of the form
   http://localhost:8000/catalog/<category>/<item>)

 - After logging in, a user has the ability to add, update, or delete
   item information.

 - Users should be able to modify only those items that they
   themselves have created.

 - http://localhost:8000/catalog/Snowboard​/add (logged in)
 - http://localhost:8000/catalog/Snowboard​/edit (logged in)
 - http://localhost:8000/catalog/Snowboard​/delete (logged in)

 - The application should provide a JSON endpoint at the very least.


Model
------
 - Tables
   - Users
   - Categories
   - Items 
   - Keywords
 - Relationships
   - Item *-1 User 
   - Item *-1 Category
   - Item *-* Keyword

View Components
----------------
 - site name (header, footer)
 - user (settings panel, admin panel)
 - user_list (admin panel)
 - user_login_link (header)
 - user_login_prompt (login_panel)
 - user_login_status (header)
 - item (main_panel)
 - item list (main_panel)

Use Cases
----------
 - admin (authorized)
   - login/logout
   - user CRUD
   - item CRUD
   - category CRUD (or are they pre-defined / fixed)
 - user (authorized)
   - login/logout
   - item CRUD
   - list items owned by user
 - visitor (unauthorized)
   - view main page
   - view items by category
   - view items by keyword
   - select and view item from list
   

Web Pages
----------
 - main page
 - admin page
 - user page
 - category page
 - item page

Web Page Components (panels)
-----------------------------
 - header
   - site name
   - login
   - login status
 - nav
   - categories list
 - main panel
 - footer
   - site name




Getting Started 
----------------

Before we begin coding, there are several steps that you should take
to make sure that you have everything downloaded in order to run your
future web application.
 
1. Install ​Vagrant​ and ​VirtualBox​ if you have not done so
   already. Instructions on how to do so can be found on the websites
   as well as​ in the course materials.​
 
2. Clone the fullstack­nanodegree­vm repository​. There is a catalog
   folder provided for you, but no files have been included. If a
   catalog folder does not exist, simply create your own inside of the
   vagrant folder.

3. Launch the Vagrant VM (by typing ​vagrant up ​in the directory ​
   fullstack/vagrant ​from the terminal). You can find further
   instructions on how to do so ​here​.

4. Write the Flask application locally in the /vagrant/catalog ​
   directory (which will automatically be synced to /vagrant/catalog ​
   within the VM). Name it application.py.

5. Run your application within the VM by typing ​python
   /vagrant/catalog/application.py into the Terminal. If you named the
   file from step 4 as something other than ​ application.py ​ , in the
   above command substitute in the file name on your computer.

6. Access and test your application by visiting ​
   http://localhost:8000​ locally on your browser.


There are four parts that you will need to complete: 

 - the HTML
 - the CSS
 - the Flask Application
 - it must include authentication/authorization
 - the database

Additional Functionality
-------------------------

In addition to the basic functions listed above, this project has many
opportunities to go above and beyond what is required. Some ways to
achieve exceeds specifications are to include the following
requirements:

  - API Endpoints​: Research and implement additional API endpoints,
    such as RSS, Atom, or XML. While we do require at the bare minimum
    a JSON endpoint, we encourage you to research and implement a
    different endpoint to see what else is out there.

  - CRUD: Read​: Add an item image field that is read from the database
    and displayed on the page. This project is being built from
    scratch meaning that the information that you include and the
    layout of the page are entirely up to you. Add pictures for a more
    vibrant web application!

  - CRUD: Create​: Update the new item form to correctly process the
    inclusion of item images. If you included additional information
    to include images, there should be a way to include those images
    when entering in new items into the database.

  - CRUD: Update:​ Update the edit/update item form to correctly
    process the inclusion of item images. Again, to stay consistent
    with the inclusion of images, items that already exist should have
    the option of changing the image as well.

  - CRUD: Delete:​ Research and implement this function using POST
    requests and nonces to prevent cross­site request forgeries
    (CSRF).

  - Comments​: Comments are not just a way for you to keep track of
    what you’re writing in terms of code, but also a great way to help
    other developers who may be reading your code. While comment
    preferences may differ from team to team, the general idea is that
    good comments cover the main purpose of the code, mention inputs
    and outputs, etc. Check out the comments section of ​ PEP­8​ and the
    Google Python Style Guide​ to get a better idea of good comments.
 
These are some points present on the rubric on how to exceed
specifications, but there are many other ways to create a project that
goes above and beyond to capture the attentions of future employers.
Because this project is created from scratch, feel free to display the
website you believe is best. Have fun with the design and the layout.
Go through documentation to see if there are any other features that
will cause your website to be more dynamic and efficient. The sky is
truly the limit on this project.
